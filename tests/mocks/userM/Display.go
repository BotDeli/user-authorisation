// Code generated by mockery v2.32.0. DO NOT EDIT.

package userM

import mock "github.com/stretchr/testify/mock"

// Display is an autogenerated mock type for the Display type
type Display struct {
	mock.Mock
}

// AuthenticationUser provides a mock function with given fields: login, password
func (_m *Display) AuthenticationUser(login string, password string) error {
	ret := _m.Called(login, password)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(login, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChangePassword provides a mock function with given fields: login, password, newPassword
func (_m *Display) ChangePassword(login string, password string, newPassword string) error {
	ret := _m.Called(login, password, newPassword)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(login, password, newPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsUser provides a mock function with given fields: login
func (_m *Display) IsUser(login string) bool {
	ret := _m.Called(login)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(login)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewUser provides a mock function with given fields: login, password
func (_m *Display) NewUser(login string, password string) error {
	ret := _m.Called(login, password)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(login, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDisplay creates a new instance of Display. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDisplay(t interface {
	mock.TestingT
	Cleanup(func())
}) *Display {
	mock := &Display{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
